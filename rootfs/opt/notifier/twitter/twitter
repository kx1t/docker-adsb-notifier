#!/usr/bin/with-contenv bash

# Use the following response conventions:
# "RESPCODE yyyymmdd-hhmmss-zzzz #servicename: info-text"
# Where:
# RESPCODE= 100 (info only), 102 (continue to process), 200 (done processing), 500 (fatal error)
# Date string can be obtained with $(date +"%Y%m%d-%H%M%S%z")
# Service name should be set as a constant
#
# Request parameters are passed to this service via the command line ($[@]) in the format "key=value"
#
# The notifier plugin writer is responsible to ensure that all notification processes finish properly.
# Notification execution should NOT be swapped to the background, but is allowed to block this process until done.
# Any output that is written to stdout from this process will be captured and made available to the requestor by
# POSTing "status=callback-handler" to "notify.php". The callback-handler was provided in the reponse
# to the original notification request.

# Define any notification-internal constants below.
# Do not change the $SERVICE variable definition.
#
# Note that ${param[notifyproc]} will contain a unique process identifier (in format "handler-xxx" where xxx is the Linux process ID)
# to point at this specific instance of the notification. It can be used to get unique screenshots, create referable files, etc.

SERVICE="${0##*/}"
MAXWAITTIME=60

echo "100 $(date +"%Y%m%d-%H%M%S%z") #${SERVICE}: cmdline args = ${@}"

# read commandline params into param[key]
# You can access them as ICAO=param[icao] etc
arguments=( "$@" )
declare -A param
for Arg in "${arguments[@]}"; do param+=([${Arg%=*}]=${Arg#*=}); done

# exit if notify_to is not empty, but we can't find the notifier in the list
if [[ ! -z "$param[notify_to]" ]]
then
  IFS="," read -ra notify_list <<< "$param[notify_to]"
  [[ ! " ${notify_list[*]} " =~ " ${SERVICE} " ]] && exit 0
  unset notify_list
fi
unset IFS

# Now we are ready to do the notification
echo "102 $(date +"%Y%m%d-%H%M%S%z") #${SERVICE}: notifier invoked"

#######################################################################
# Implement the actual notifier below                                 #
#######################################################################

# First -- get a screenshot
screenshotfile="$(/opt/notifier/getscreenshotnow.sh ${param[icao]} ${param[notifyproc]})"
# Screenshot retrieval finished. $result will contain a file link if successful, or empty if not successful

# Now the actual notification:
# First make sure the keys and secrets are present. We cant check if they are correct, but we can see if they are present:
if [[ "${TWITTER_CONSKEY}${TWITTER_CONSSECRET}${TWITTER_ACCTOKEN}${TWITTER_ACCSECRET}" == "" ]]
then
  echo "500 $(date +"%Y%m%d-%H%M%S%z") #${SERVICE}: Twitter Keys and Secrets aren\'t defined. Cannot tweet!"
  exit 0
fi

# add screenshot to the message if available
[[ ! -z "${screenshotfile}" ]] && rscreenshotfile="-a ${screenshotfile}" || true

# Now invoke apprise to tweet:
notif_result="$(apprise -vvv "${screenshotfile}" -b "${param[message_text]}" twitter://$TWITTER_CONSKEY/$TWITTER_CONSSECRET/$TWITTER_ACCTOKEN/$TWITTER_ACCSECRET/?mode=tweet)"

# process the results
apprise_exit_code="$?"
mapfile -t twitter_result <<< "${notif_result}"
for (( n=0; n<${#twitter_result[@]}; n++ )); do [[ "${twitter_result[n]}" =~ "Response Details" ]] && twitter_string="${twitter_result[n+1]}"; done

# report on the results
if [[ apprise_exit_code ]]
then
  echo "200 $(date +"%Y%m%d-%H%M%S%z") #${SERVICE}: Tweet sent successfully"
  echo "100 $(date +"%Y%m%d-%H%M%S%z") #${SERVICE}: Twitter returned: ${twitter_string}"
else
  echo "500 $(date +"%Y%m%d-%H%M%S%z") #${SERVICE}: Tweet sent unsuccessfully"
  echo "100 $(date +"%Y%m%d-%H%M%S%z") #${SERVICE}: Twitter returned: ${twitter_string}"
fi
exit 0
